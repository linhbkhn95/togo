// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/manabie-com/togo/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// TaskStorage is an autogenerated mock type for the TaskStorage type
type TaskStorage struct {
	mock.Mock
}

// AddTask provides a mock function with given fields: ctx, task
func (_m *TaskStorage) AddTask(ctx context.Context, task *entity.Task) error {
	ret := _m.Called(ctx, task)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Task) error); ok {
		r0 = rf(ctx, task)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetNumberOfTasks provides a mock function with given fields: ctx, userID, date
func (_m *TaskStorage) GetNumberOfTasks(ctx context.Context, userID string, date string) (int, error) {
	ret := _m.Called(ctx, userID, date)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, string, string) int); ok {
		r0 = rf(ctx, userID, date)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userID, date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveTasks provides a mock function with given fields: ctx, userID, createdDate
func (_m *TaskStorage) RetrieveTasks(ctx context.Context, userID string, createdDate string) ([]*entity.Task, error) {
	ret := _m.Called(ctx, userID, createdDate)

	var r0 []*entity.Task
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []*entity.Task); ok {
		r0 = rf(ctx, userID, createdDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userID, createdDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
